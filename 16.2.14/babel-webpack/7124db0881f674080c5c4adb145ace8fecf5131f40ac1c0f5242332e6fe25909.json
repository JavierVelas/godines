{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet UbicacionComponent = class UbicacionComponent {\n  constructor(ubicacionService, router) {\n    this.ubicacionService = ubicacionService;\n    this.router = router;\n    this.ubicaciones = [];\n    this.newUbicacion = {};\n    this.editingUbicacion = null;\n    this.selectedFile = null; // Archivo seleccionado para la imagen, inicializado como null\n    this.error = '';\n  }\n  ngOnInit() {\n    this.loadUbicaciones();\n  }\n  ngAfterViewInit() {\n    // Ahora puedes asegurarte de que la referencia esté disponible\n    console.log(this.ubicacionesList);\n  }\n  // Métodos para el desplazamiento horizontal de la lista de ubicaciones\n  scrollLeft() {\n    this.ubicacionesList.nativeElement.scrollBy({\n      left: -200,\n      behavior: 'smooth'\n    });\n  }\n  scrollRight() {\n    this.ubicacionesList.nativeElement.scrollBy({\n      left: 200,\n      behavior: 'smooth'\n    });\n  }\n  loadUbicaciones() {\n    this.ubicacionService.getUbicaciones().subscribe(data => {\n      this.ubicaciones = data;\n    }, err => {\n      console.error('Error obteniendo ubicaciones:', err);\n      this.error = 'Error en el servidor al obtener ubicaciones.';\n    });\n  }\n  onFileChange(event) {\n    const element = event.target;\n    if (element.files && element.files.length > 0) {\n      this.selectedFile = element.files[0];\n    }\n  }\n  createUbicacion() {\n    if (this.selectedFile) {\n      this.ubicacionService.uploadImagen(this.selectedFile).subscribe(response => {\n        this.newUbicacion.imagen_ubi = response.imageUrl; // Añade la URL de la imagen a la nueva ubicación\n        this.saveUbicacion(this.newUbicacion); // Guarda la ubicación con la imagen\n      }, error => {\n        console.error('Error al cargar la imagen:', error);\n      });\n    } else {\n      this.saveUbicacion(this.newUbicacion); // Guarda la ubicación sin imagen\n    }\n  }\n\n  saveUbicacion(ubicacion) {\n    this.ubicacionService.createUbicacion(ubicacion).subscribe(data => {\n      this.ubicaciones.push(data);\n      this.newUbicacion = {};\n      this.router.navigate(['ubicacion']); // Navegar a la lista de ubicaciones después de crear\n    }, err => {\n      console.error('Error creando ubicación:', err);\n      this.error = 'Error en el servidor al crear ubicación.';\n    });\n  }\n  editUbicacion(ubicacion) {\n    this.editingUbicacion = {\n      ...ubicacion\n    };\n  }\n  updateUbicacion() {\n    if (this.selectedFile && !this.editingUbicacion.imagen_ubi) {\n      // Si hay un archivo seleccionado y no hay imagen previa, sube primero la imagen\n      this.ubicacionService.uploadImagen(this.selectedFile).subscribe(response => {\n        this.editingUbicacion.imagen_ubi = response.imageUrl; // Actualiza la imagen de la ubicación\n        this.saveUpdatedUbicacion();\n      }, error => {\n        console.error('Error al cargar la imagen:', error);\n      });\n    } else {\n      this.saveUpdatedUbicacion();\n    }\n  }\n  saveUpdatedUbicacion() {\n    this.ubicacionService.updateUbicacion(this.editingUbicacion.ubi_id, this.editingUbicacion).subscribe(data => {\n      const index = this.ubicaciones.findIndex(u => u.ubi_id === this.editingUbicacion.ubi_id);\n      if (index !== -1) {\n        this.ubicaciones[index] = data;\n      }\n      this.editingUbicacion = null;\n      this.router.navigate(['ubicacion']); // Navegar a la lista de ubicaciones después de actualizar\n    }, err => {\n      console.error('Error actualizando ubicación:', err);\n      this.error = 'Error en el servidor al actualizar ubicación.';\n    });\n  }\n  deleteUbicacion(ubi_id) {\n    if (ubi_id) {\n      this.ubicacionService.deleteUbicacion(ubi_id).subscribe(data => {\n        this.ubicaciones = this.ubicaciones.filter(u => u.ubi_id !== ubi_id);\n        this.router.navigate(['ubicacion']); // Navegar a la lista de ubicaciones después de eliminar\n      }, err => {\n        console.error('Error eliminando ubicación:', err);\n        this.error = 'Error en el servidor al eliminar ubicación.';\n      });\n    } else {\n      console.error('ID de ubicación no válido:', ubi_id);\n    }\n  }\n};\nUbicacionComponent = __decorate([Component({\n  selector: 'app-ubicacion',\n  templateUrl: './ubicacion.component.html',\n  styleUrls: ['./ubicacion.component.css']\n})], UbicacionComponent);\nexport { UbicacionComponent };","map":{"version":3,"names":["Component","UbicacionComponent","constructor","ubicacionService","router","ubicaciones","newUbicacion","editingUbicacion","selectedFile","error","ngOnInit","loadUbicaciones","ngAfterViewInit","console","log","ubicacionesList","scrollLeft","nativeElement","scrollBy","left","behavior","scrollRight","getUbicaciones","subscribe","data","err","onFileChange","event","element","target","files","length","createUbicacion","uploadImagen","response","imagen_ubi","imageUrl","saveUbicacion","ubicacion","push","navigate","editUbicacion","updateUbicacion","saveUpdatedUbicacion","ubi_id","index","findIndex","u","deleteUbicacion","filter","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\980030881\\OneDrive\\Escritorio\\proyecto_web\\frontend\\componentes\\ubicacion\\ubicacion.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UbicacionService } from 'src/app/services/ubicacion.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-ubicacion',\n  templateUrl: './ubicacion.component.html',\n  styleUrls: ['./ubicacion.component.css']\n})\nexport class UbicacionComponent implements OnInit {\n  ubicaciones: any[] = [];\n  newUbicacion: any = {};\n  editingUbicacion: any = null;\n  selectedFile: File | null = null;  // Archivo seleccionado para la imagen, inicializado como null\n  error = '';\n\n  constructor( private ubicacionService: UbicacionService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.loadUbicaciones();\n  }\n\n  ngAfterViewInit(): void {\n    // Ahora puedes asegurarte de que la referencia esté disponible\n    console.log(this.ubicacionesList);\n  }\n   // Métodos para el desplazamiento horizontal de la lista de ubicaciones\n   scrollLeft(): void {\n    this.ubicacionesList.nativeElement.scrollBy({ left: -200, behavior: 'smooth' });\n  }\n\n  scrollRight(): void {\n    this.ubicacionesList.nativeElement.scrollBy({ left: 200, behavior: 'smooth' });\n  }\n\n  loadUbicaciones(): void {\n    this.ubicacionService.getUbicaciones().subscribe(\n      data => {\n        this.ubicaciones = data;\n      },\n      err => {\n        console.error('Error obteniendo ubicaciones:', err);\n        this.error = 'Error en el servidor al obtener ubicaciones.';\n      }\n    );\n  }\n\n  onFileChange(event: Event): void {\n    const element = event.target as HTMLInputElement;\n    if (element.files && element.files.length > 0) {\n      this.selectedFile = element.files[0];\n    }\n  }\n\n  createUbicacion(): void {\n    if (this.selectedFile) {\n      this.ubicacionService.uploadImagen(this.selectedFile).subscribe(\n        response => {\n          this.newUbicacion.imagen_ubi = response.imageUrl;  // Añade la URL de la imagen a la nueva ubicación\n          this.saveUbicacion(this.newUbicacion);  // Guarda la ubicación con la imagen\n        },\n        error => {\n          console.error('Error al cargar la imagen:', error);\n        }\n      );\n    } else {\n      this.saveUbicacion(this.newUbicacion);  // Guarda la ubicación sin imagen\n    }\n  }\n\n  saveUbicacion(ubicacion: any): void {\n    this.ubicacionService.createUbicacion(ubicacion).subscribe(\n      data => {\n        this.ubicaciones.push(data);\n        this.newUbicacion = {};\n        this.router.navigate(['ubicacion']); // Navegar a la lista de ubicaciones después de crear\n      },\n      err => {\n        console.error('Error creando ubicación:', err);\n        this.error = 'Error en el servidor al crear ubicación.';\n      }\n    );\n  }\n\n  editUbicacion(ubicacion: any): void {\n    this.editingUbicacion = { ...ubicacion };\n  }\n\n  updateUbicacion(): void {\n    if (this.selectedFile && !this.editingUbicacion.imagen_ubi) {\n      // Si hay un archivo seleccionado y no hay imagen previa, sube primero la imagen\n      this.ubicacionService.uploadImagen(this.selectedFile).subscribe(\n        response => {\n          this.editingUbicacion.imagen_ubi = response.imageUrl;  // Actualiza la imagen de la ubicación\n          this.saveUpdatedUbicacion();\n        },\n        error => {\n          console.error('Error al cargar la imagen:', error);\n        }\n      );\n    } else {\n      this.saveUpdatedUbicacion();\n    }\n  }\n\n  saveUpdatedUbicacion(): void {\n    this.ubicacionService.updateUbicacion(this.editingUbicacion.ubi_id, this.editingUbicacion).subscribe(\n      data => {\n        const index = this.ubicaciones.findIndex(u => u.ubi_id === this.editingUbicacion.ubi_id);\n        if (index !== -1) {\n          this.ubicaciones[index] = data;\n        }\n        this.editingUbicacion = null;\n        this.router.navigate(['ubicacion']); // Navegar a la lista de ubicaciones después de actualizar\n      },\n      err => {\n        console.error('Error actualizando ubicación:', err);\n        this.error = 'Error en el servidor al actualizar ubicación.';\n      }\n    );\n  }\n\n  deleteUbicacion(ubi_id: number): void {\n    if (ubi_id) {\n      this.ubicacionService.deleteUbicacion(ubi_id).subscribe(\n        data => {\n          this.ubicaciones = this.ubicaciones.filter(u => u.ubi_id !== ubi_id);\n          this.router.navigate(['ubicacion']); // Navegar a la lista de ubicaciones después de eliminar\n        },\n        err => {\n          console.error('Error eliminando ubicación:', err);\n          this.error = 'Error en el servidor al eliminar ubicación.';\n        }\n      );\n    } else {\n      console.error('ID de ubicación no válido:', ubi_id);\n    }\n  }\n\n  \n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}