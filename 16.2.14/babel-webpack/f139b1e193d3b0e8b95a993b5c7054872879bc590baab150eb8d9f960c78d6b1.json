{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass FeedbackService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api'; // URL del backend\n  }\n  // Obtener todos los feedback\n  getFeedbacks() {\n    return this.http.get(`${this.apiUrl}/feedback`);\n  }\n  // Obtener un feedback por ID\n  getFeedbackById(id) {\n    return this.http.get(`${this.apiUrl}/feedback/${id}`);\n  }\n  // Crear un nuevo feedback\n  createFeedback(feedback) {\n    return this.http.post(`${this.apiUrl}/feedback`, feedback);\n  }\n  // Actualizar un feedback existente\n  updateFeedback(id, feedback) {\n    return this.http.put(`${this.apiUrl}/feedback/${id}`, feedback);\n  }\n  // Eliminar un feedback por ID\n  deleteFeedback(id) {\n    return this.http.delete(`${this.apiUrl}/feedback/${id}`);\n  }\n  static #_ = this.ɵfac = function FeedbackService_Factory(t) {\n    return new (t || FeedbackService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FeedbackService,\n    factory: FeedbackService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { FeedbackService };","map":{"version":3,"names":["FeedbackService","constructor","http","apiUrl","getFeedbacks","get","getFeedbackById","id","createFeedback","feedback","post","updateFeedback","put","deleteFeedback","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\980030881\\OneDrive\\Escritorio\\proyecto_web - copia\\frontend\\src\\app\\services\\feedback.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FeedbackService {\r\n  private apiUrl = 'http://localhost:3000/api'; // URL del backend\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Obtener todos los feedback\r\n  getFeedbacks(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.apiUrl}/feedback`);\r\n  }\r\n\r\n  // Obtener un feedback por ID\r\n  getFeedbackById(id: number): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/feedback/${id}`);\r\n  }\r\n\r\n  // Crear un nuevo feedback\r\n  createFeedback(feedback: any): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/feedback`, feedback);\r\n  }\r\n\r\n  // Actualizar un feedback existente\r\n  updateFeedback(id: number, feedback: any): Observable<any> {\r\n    return this.http.put<any>(`${this.apiUrl}/feedback/${id}`, feedback);\r\n  }\r\n\r\n  // Eliminar un feedback por ID\r\n  deleteFeedback(id: number): Observable<any> {\r\n    return this.http.delete<any>(`${this.apiUrl}/feedback/${id}`);\r\n  }\r\n}\r\n"],"mappings":";;AAIA,MAGaA,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,2BAA2B,CAAC,CAAC;EAEN;EAExC;EACAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,MAAM,WAAW,CAAC;EACxD;EAEA;EACAG,eAAeA,CAACC,EAAU;IACxB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,MAAM,aAAaI,EAAE,EAAE,CAAC;EAC5D;EAEA;EACAC,cAAcA,CAACC,QAAa;IAC1B,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACP,MAAM,WAAW,EAAEM,QAAQ,CAAC;EACjE;EAEA;EACAE,cAAcA,CAACJ,EAAU,EAAEE,QAAa;IACtC,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAM,GAAG,IAAI,CAACT,MAAM,aAAaI,EAAE,EAAE,EAAEE,QAAQ,CAAC;EACtE;EAEA;EACAI,cAAcA,CAACN,EAAU;IACvB,OAAO,IAAI,CAACL,IAAI,CAACY,MAAM,CAAM,GAAG,IAAI,CAACX,MAAM,aAAaI,EAAE,EAAE,CAAC;EAC/D;EAAC,QAAAQ,CAAA,G;qBA5BUf,eAAe,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfpB,eAAe;IAAAqB,OAAA,EAAfrB,eAAe,CAAAsB,IAAA;IAAAC,UAAA,EAFd;EAAM;;SAEPvB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}